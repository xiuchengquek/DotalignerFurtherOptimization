%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jun 16 15:13:21 2016
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
G__U_CGGCCAUAACACACAAAAAG_CAC_CCCAGCU_CAUCU_GAACCCGAAAGCUAAGC_GGGAC_GGCGUCGAUAAUA_CUGCACCCGA_ACCGCCUGGG_ACACCAGAU_GUUG_CAACC\
) def
/coor [
[65.36344147 151.53421021]
[56.92940140 144.72572327]
[49.80786133 136.55429077]
[44.21584320 127.26892090]
[40.32374954 117.15258789]
[38.25018311 106.51355743]
[38.05833435 95.67604065]
[39.75405502 84.97028351]
[43.28565979 74.72253418]
[30.42276192 67.00594330]
[17.55986214 59.28935242]
[4.69696140 51.57275772]
[-11.11742687 51.10834503]
[-18.05102921 37.92599106]
[-30.91392899 30.20939827]
[-49.27536774 30.37569237]
[-57.28022385 14.81256580]
[-70.33297729 7.42165613]
[-83.38573456 0.03074596]
[-96.43849182 -7.36016417]
[-112.60167694 0.64788699]
[-130.19836426 -2.53613186]
[-142.31752014 -15.47289562]
[-144.31216431 -32.93016434]
[-157.71978760 -39.65591049]
[-166.90620422 -40.73158646]
[-171.37664795 -46.72286224]
[-183.79225159 -41.33082962]
[-196.84869385 -44.06974411]
[-205.78515625 -53.71028900]
[-207.47679138 -66.54940796]
[-220.52954102 -73.94032288]
[-233.58230591 -81.33123016]
[-246.63505554 -88.72213745]
[-259.68780518 -96.11305237]
[-275.50888062 -96.17990112]
[-282.77157593 -109.18384552]
[-291.89233398 -110.71972656]
[-296.05609131 -116.92805481]
[-311.90609741 -114.44660187]
[-323.63058472 -125.39719391]
[-322.23556519 -141.37948608]
[-308.79116821 -150.13322449]
[-293.61080933 -144.94328308]
[-288.33950806 -129.79095459]
[-275.38064575 -122.23660278]
[-260.49322510 -122.69840240]
[-252.29690552 -109.16580963]
[-239.24415588 -101.77489471]
[-226.19139099 -94.38398743]
[-213.13864136 -86.99307251]
[-200.08587646 -79.60216522]
[-184.14321899 -84.79535675]
[-169.05516052 -76.74068451]
[-164.31608582 -59.95722961]
[-150.99404907 -53.06353378]
[-137.58642578 -46.33778381]
[-127.63962555 -53.51385880]
[-115.50608063 -55.74953461]
[-103.51454926 -52.55247498]
[-93.99369049 -44.47914505]
[-88.81987762 -33.03908539]
[-89.04758453 -20.41292000]
[-75.99482727 -13.02201080]
[-62.94207001 -5.63110018]
[-49.88931274 1.75980985]
[-38.07909393 -1.16325128]
[-27.11425018 4.98079443]
[-23.19733620 17.34649849]
[-10.33443642 25.06309319]
[4.55991220 24.97556305]
[12.41355419 38.70985794]
[25.27645493 46.42645264]
[38.13935471 54.14304352]
[51.00225449 61.85963821]
[65.90310669 48.10714722]
[84.44021606 39.88877487]
[104.63671112 38.08096313]
[124.33871460 42.87650681]
[141.44511414 53.76398849]
[154.13160706 69.58231354]
[161.04522705 88.64453125]
[176.01562500 87.70267487]
[190.98602295 86.76081848]
[205.95643616 85.81895447]
[220.92683411 84.87709808]
[235.89723206 83.93524170]
[250.86763000 82.99338531]
[265.83804321 82.05152893]
[280.80844116 81.10967255]
[294.16076660 71.58877563]
[308.96798706 78.63706207]
[309.99768066 95.00385284]
[296.19061279 103.85239410]
[281.75030518 96.08007050]
[266.77987671 97.02192688]
[251.80949402 97.96378326]
[236.83909607 98.90563965]
[221.86868286 99.84750366]
[206.89828491 100.78936005]
[191.92788696 101.73121643]
[176.95748901 102.67307281]
[161.98709106 103.61492920]
[159.97979736 116.05895233]
[155.50076294 127.84119415]
[148.73454285 138.47610474]
[139.95999146 147.52542114]
[148.15591431 160.08833313]
[156.35182190 172.65126038]
[164.54774475 185.21417236]
[172.74365234 197.77709961]
[187.60763550 204.70487976]
[188.77026367 221.06275940]
[175.03550720 230.02316284]
[160.53253174 222.36839294]
[160.18074036 205.97300720]
[151.98481750 193.41009521]
[143.78890991 180.84716797]
[135.59298706 168.28425598]
[127.39707947 155.72132874]
[117.28971863 159.63667297]
[106.65547943 161.73468018]
[95.81842804 161.95144653]
[85.10881042 160.28033447]
] def
/pairs [
[9 75]
[10 74]
[11 73]
[12 72]
[14 70]
[15 69]
[17 66]
[18 65]
[19 64]
[20 63]
[24 57]
[25 56]
[27 55]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[37 46]
[39 45]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
[107 120]
[108 119]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
9 cmark
10 cmark
74 cmark
12 72 1 gmark
14 cmark
70 cmark
15 69 1 gmark
17 66 1 gmark
18 cmark
65 cmark
19 cmark
64 cmark
20 cmark
63 cmark
24 cmark
56 cmark
31 52 1 gmark
32 cmark
33 50 1 gmark
34 49 1 gmark
35 48 1 gmark
82 103 1 gmark
86 cmark
99 cmark
87 98 1 gmark
88 cmark
89 cmark
96 cmark
90 cmark
95 cmark
107 cmark
120 cmark
108 119 1 gmark
109 cmark

% End Annotations
% show it
showpage
end
%%EOF
